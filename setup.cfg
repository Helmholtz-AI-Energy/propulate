# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = propulate
version = 1.0.1
description = Massively parallel genetic optimization through asynchronous propagation of populations
author = Oskar Taubert, Marie Weiel, Helmholtz AI
author_email = oskar.taubert@kit.edu, marie.weiel@kit.edu
license = "BSD 3-Clause"
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8
# Change if running only on Windows, Mac or Linux (comma-separated)
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python

[options]
zip_safe = False
packages = find:
include_package_data = True
package_dir =
    =.
# DON'T CHANGE THE FOLLOWING LINE! IT WILL BE UPDATED BY PYSCAFFOLD!
#setup_requires = pyscaffold>=3.2a0,<3.3a0
# Add here dependencies of your project (semicolon/line-separated), e.g.
# install_requires = numpy; scipy
install_requires =
	cycler #==0.11.0
	deepdiff #==5.8.0
	kiwisolver #==1.4.2
	matplotlib #==3.2.1
	mpi4py #==3.0.3
	numpy #==1.22.3
	ordered-set #==4.1.0
	pyparsing #==3.0.7
	python-dateutil #==2.8.2
	six #==1.16.0
# The usage of test_requires is discouraged, see `Dependency Management` docs
# tests_require = pytest; pytest-cov
# Require a specific Python version, e.g. Python 2.7 or >= 3.4
# python_requires = >=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*

[options.extras_require]
testing =
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = propulate.module:function
# For example:
# console_scripts =
#     fibonacci = propulate.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[test]
# py.test options when running `python setup.py test`
# addopts = --verbose
extras = True

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
#norecursedirs =
#    dist
#    build
#    .tox
testpaths = tests

[aliases]
dists = bdist_wheel

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

# Automatically build docs from doc strings.
[build_sphinx]
source_dir = docs
build_dir = build/sphinx

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py
max-line-length = 250

[semantic_release]
branch = "release"
upload_to_pypi=true
upload_to_release=true
commit_message= "{version} [skip ci]"

version_variable = "setup.cfg:version"

build_command = "python -m build"
