[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["propulate", "propulate.propagators", "propulate.utils"]

[project]
name = "propulate"
version = "1.2.2"
authors = [
  { name="Marie Weiel, Oskar Taubert, Helmholtz AI", email="propulate@lists.kit.edu" },
]
description = "Massively parallel genetic optimization through asynchronous propagation of populations"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Development Status :: 3 - Alpha",
]
dependencies = [
	"deepdiff",
    "matplotlib ~= 3.8.4",
	"mpi4py",
	"numpy",
    "colorlog",
    "Gpy ~= 1.13.1",
    "h5py",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "coverage",
    "ruff",
    "mypy",
    "pytest",
    "pytest-cov",
    "pytest-mpi",
    "sphinx-autoapi",
    "sphinx-rtd-theme",
    "sphinxcontrib-napoleon",
    "sphinxemoji",
    "torch",
    "torchvision",
    "torchmetrics",
]

tutorials = [
    "torch",
    "torchvision",
    "torchmetrics",
    "lightning",
]

[project.urls]
Homepage = "https://github.com/Helmholtz-AI-Energy/propulate"
Issues = "https://github.com/Helmholtz-AI-Energy/propulate/issues"

[tool.mypy]
python_version = "3.9"
modules = ["propulate"]
disallow_untyped_defs = true
disallow_incomplete_defs = true
files = [
    "tutorials/"
]


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9.
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["N", "E4", "E7", "E9", "F", "D"]
ignore = ["D100", "D104", "D404"]
# Enable import sorting
extend-select = ["I"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
testpaths = [
    "tests",
]

[tool.coverage.run]
parallel = true
